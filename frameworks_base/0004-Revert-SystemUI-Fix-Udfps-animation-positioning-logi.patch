From 586c6894dcb7a27939dc6b4f72d863fd900e66be Mon Sep 17 00:00:00 2001
From: flakeforever <113103193+flakeforever@users.noreply.github.com>
Date: Thu, 5 Sep 2024 12:10:31 +0800
Subject: [PATCH 4/5] Revert "SystemUI: Fix Udfps animation positioning logic"

This reverts commit 1ee50ff8fd256c86baf9238908ccbf51c38e2fc0.
---
 .../systemui/biometrics/UdfpsAnimation.java   | 47 ++++---------------
 .../systemui/biometrics/UdfpsController.java  | 40 +---------------
 2 files changed, 10 insertions(+), 77 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsAnimation.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsAnimation.java
index 664ec7cb5467..58ba13f340c9 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsAnimation.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsAnimation.java
@@ -29,7 +29,6 @@ import android.content.pm.PackageManager;
 import android.content.res.Resources;
 import android.database.ContentObserver;
 import android.graphics.PixelFormat;
-import android.graphics.Point;
 import android.graphics.drawable.AnimationDrawable;
 import android.graphics.drawable.Drawable;
 import android.hardware.fingerprint.FingerprintSensorPropertiesInternal;
@@ -48,18 +47,18 @@ import android.graphics.Rect;
 
 import com.android.systemui.Dependency;
 import com.android.systemui.res.R;
-import com.android.systemui.biometrics.AuthController;
 import com.android.systemui.plugins.statusbar.StatusBarStateController;
 import com.android.systemui.statusbar.policy.KeyguardStateController;
 
 public class UdfpsAnimation extends ImageView {
 
-    private static final boolean DEBUG = false;
+    private static final boolean DEBUG = true;
     private static final String LOG_TAG = "UdfpsAnimations";
 
     private boolean mShowing = false;
     private Context mContext;
     private int mAnimationSize;
+    private int mAnimationOffset;
     private AnimationDrawable recognizingAnim;
 
     private final WindowManager.LayoutParams mAnimParams = new WindowManager.LayoutParams();
@@ -77,8 +76,6 @@ public class UdfpsAnimation extends ImageView {
     private Resources mApkResources;
     
     private final KeyguardStateController mKeyguardStateController;
-    private final AuthController mAuthController;
-    private final FingerprintSensorPropertiesInternal mProps;
 
     private boolean mIsContentObserverRegistered = false;
 
@@ -113,17 +110,15 @@ public class UdfpsAnimation extends ImageView {
     };
 
     public UdfpsAnimation(Context context, WindowManager windowManager,
-           FingerprintSensorPropertiesInternal props, AuthController authController) {
+           FingerprintSensorPropertiesInternal props) {
         super(context);
         mContext = context;
-        mAuthController = authController;
-        mProps = props;
 
         mWindowManager = windowManager;
         
         mKeyguardStateController = Dependency.get(KeyguardStateController.class);
 
-        float scaleFactor = getDisplayFactor();
+        final float scaleFactor = DisplayUtils.getScaleFactor(mContext);
 
         mMaxBurnInOffsetX = (int) (context.getResources()
             .getDimensionPixelSize(R.dimen.udfps_burn_in_offset_x) * scaleFactor);
@@ -131,6 +126,7 @@ public class UdfpsAnimation extends ImageView {
             .getDimensionPixelSize(R.dimen.udfps_burn_in_offset_y) * scaleFactor);
 
         mAnimationSize = mContext.getResources().getDimensionPixelSize(R.dimen.udfps_animation_size);
+        mAnimationOffset = (int) (mContext.getResources().getDimensionPixelSize(R.dimen.udfps_animation_offset) * scaleFactor);
 
         mAnimParams.height = mAnimationSize;
         mAnimParams.width = mAnimationSize;
@@ -141,8 +137,8 @@ public class UdfpsAnimation extends ImageView {
                 | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE
                 | WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS;
         mAnimParams.gravity = Gravity.TOP | Gravity.CENTER;
-
-        updatePosition();
+        mAnimParams.y = (int) (props.getLocation().sensorLocationY * scaleFactor) - (int) (props.getLocation().sensorRadius * scaleFactor)
+                - (mAnimationSize / 2) + mAnimationOffset;
 
         try {
             PackageManager pm = mContext.getPackageManager();
@@ -203,33 +199,6 @@ public class UdfpsAnimation extends ImageView {
     public boolean isAnimationEnabled() {
         return recognizingAnim != null;
     }
-    
-    private float getDisplayFactor() {
-        return DisplayUtils.getScaleFactor(mContext);
-    }
-    
-    public void updatePosition() {
-        Point displaySize = new Point();
-        mWindowManager.getDefaultDisplay().getRealSize(displaySize);
-        boolean isFullResolution = displaySize.y > 3000; 
-        Point udfpsLocation = mAuthController.getUdfpsLocation();
-        float scaleFactor = getDisplayFactor();
-        float udfpsRadius = isFullResolution ? mAuthController.getUdfpsRadius() : mProps.getLocation().sensorRadius;
-        float udfpsLocationY = isFullResolution && udfpsLocation != null ? udfpsLocation.y : mProps.getLocation().sensorLocationY;
-        int animationOffset = (int) (mContext.getResources().getDimensionPixelSize(R.dimen.udfps_animation_offset) * scaleFactor);
-        mAnimParams.y = (int) (udfpsLocationY * scaleFactor) - (int) (udfpsRadius * scaleFactor)
-                        - (mAnimationSize / 2) + animationOffset;
-        if (DEBUG) {
-            Log.d(LOG_TAG, "updatePosition: displaySize=" + displaySize + 
-                           ", isFullResolution=" + isFullResolution + 
-                           ", udfpsLocation=" + udfpsLocation + 
-                           ", udfpsRadius=" + udfpsRadius + 
-                           ", scaleFactor=" + scaleFactor + 
-                           ", udfpsLocationY=" + udfpsLocationY + 
-                           ", animationOffset=" + animationOffset + 
-                           ", mAnimParams.y=" + mAnimParams.y);
-        }
-    }
 
     public void show() {
         if (!mShowing && mIsKeyguard && isAnimationEnabled()) {
@@ -255,7 +224,7 @@ public class UdfpsAnimation extends ImageView {
         }
     }
     
-    public void removeAnimation() {
+    private void removeAnimation() {
         if (recognizingAnim != null) {
             clearAnimation();
             recognizingAnim.stop();
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
index a37c56649056..2cf0df917c0f 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
@@ -33,7 +33,6 @@ import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
-import android.content.res.Configuration;
 import android.database.ContentObserver;
 import android.graphics.Rect;
 import android.hardware.biometrics.BiometricFingerprintConstants;
@@ -73,7 +72,6 @@ import com.android.internal.util.LatencyTracker;
 import com.android.keyguard.KeyguardUpdateMonitor;
 import com.android.systemui.Dumpable;
 import com.android.systemui.animation.ActivityTransitionAnimator;
-import com.android.systemui.biometrics.AuthController;
 import com.android.systemui.biometrics.dagger.BiometricsBackground;
 import com.android.systemui.biometrics.domain.interactor.UdfpsOverlayInteractor;
 import com.android.systemui.biometrics.shared.model.UdfpsOverlayParams;
@@ -188,7 +186,6 @@ public class UdfpsController implements DozeReceiver, Dumpable {
     @NonNull private final CoroutineScope mScope;
     @NonNull private final InputManager mInputManager;
     @NonNull private final UdfpsKeyguardAccessibilityDelegate mUdfpsKeyguardAccessibilityDelegate;
-    @NonNull private final AuthController mAuthController;
     @NonNull private final SelectedUserInteractor mSelectedUserInteractor;
     @NonNull private final FpsUnlockTracker mFpsUnlockTracker;
     private final boolean mIgnoreRefreshRate;
@@ -271,24 +268,6 @@ public class UdfpsController implements DozeReceiver, Dumpable {
         }
     };
 
-    private ConfigurationController.ConfigurationListener mConfigurationListener =
-            new ConfigurationController.ConfigurationListener() {
-                @Override
-                public void onThemeChanged() {
-                    updateUdfpsAnimation();
-                }
-
-                @Override
-                public void onUiModeChanged() {
-                    updateUdfpsAnimation();
-                }
-
-                @Override
-                public void onConfigChanged(Configuration newConfig) {
-                    updateUdfpsAnimation();
-                }
-            };
-
     @Override
     public void dump(@NonNull PrintWriter pw, @NonNull String[] args) {
         final int touchConfigId = mContext.getResources().getInteger(
@@ -737,8 +716,7 @@ public class UdfpsController implements DozeReceiver, Dumpable {
             Lazy<DefaultUdfpsTouchOverlayViewModel> defaultUdfpsTouchOverlayViewModel,
             @NonNull UdfpsOverlayInteractor udfpsOverlayInteractor,
             @NonNull PowerInteractor powerInteractor,
-            @Application CoroutineScope scope,
-            @NonNull AuthController authController) {
+            @Application CoroutineScope scope) {
         mContext = context;
         mExecution = execution;
         mVibrator = vibrator;
@@ -789,8 +767,6 @@ public class UdfpsController implements DozeReceiver, Dumpable {
         mDefaultUdfpsTouchOverlayViewModel = defaultUdfpsTouchOverlayViewModel;
 
         mDumpManager.registerDumpable(TAG, this);
-        
-        mAuthController = authController;
 
         mOrientationListener = new BiometricDisplayListener(
                 context,
@@ -839,21 +815,9 @@ public class UdfpsController implements DozeReceiver, Dumpable {
             );
         }
 
-        updateUdfpsAnimation();
-        mConfigurationController.addCallback(mConfigurationListener);
-    }
-
-    private void updateUdfpsAnimation() {
         if (com.android.internal.util.evolution.Utils.isPackageInstalled(mContext,
                 "org.evolution.udfps.animations")) {
-            if (mUdfpsAnimation != null) {
-                mUdfpsAnimation.removeAnimation();
-                mUdfpsAnimation = null;
-            }
-            mUdfpsAnimation = new UdfpsAnimation(mContext, mWindowManager, mSensorProps, mAuthController);
-            if (mUdfpsAnimation != null) {
-                mUdfpsAnimation.updatePosition();
-            }
+            mUdfpsAnimation = new UdfpsAnimation(mContext, mWindowManager, mSensorProps);
         }
     }
 
-- 
2.34.1

